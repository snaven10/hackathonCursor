---
description: Global Laravel + Blade + TailwindCSS development rules and conventions.
context: context7
globs:
  - "**/*.php"
  - "resources/views/**/*.blade.php"
  - "resources/css/**/*.css"
alwaysApply: true
---

# Laravel + Blade + TailwindCSS General Rules

## Framework Context

This project is built with **Laravel 11**, using **Blade** for templating and **TailwindCSS** for styling.  
Cursor must assume a **traditional full-stack Laravel application**, not an API-only project.

All generated code must be compatible with:
- Laravel 11+
- PHP 8.3+
- Blade for frontend rendering
- TailwindCSS v3+ for UI
- MariaDB (or PostgreSQL)
- Redis for cache

---

## Project Structure & Conventions

### 1. General Folder Structure

app/
  Http/
    Controllers/
    Requests/
    Middleware/
  Models/
  Services/
resources/
  views/
    components/
  css/
routes/
  web.php
  api.php

- All controllers go in app/Http/Controllers/
- Views go in resources/views/
- Use standard Laravel folder structure unless explicitly required otherwise.

---

### 2. Artisan Commands

Always generate files using Laravel Artisan commands:

php artisan make:model
php artisan make:controller
php artisan make:request
php artisan make:test
php artisan make:view

Cursor must respect Laravel’s folder structure and naming conventions.

---

### 3. Controllers

- Keep controllers **thin** — handle logic through Services or Models.  
- Controllers should only:
  - Receive input (via validated Form Requests)
  - Call a Service or Model
  - Return a response (view or redirect)

Example:

public function index(RecipeService $service)
{
    $recipes = $service->getAll();
    return view('recipes.index', compact('recipes'));
}

---

### 4. Blade Templates

- Use .blade.php for all templates.  
- Apply Laravel’s layout system with @extends, @section, @include, and @component.  
- All reusable UI components belong in resources/views/components/.  
- Avoid inline PHP or complex logic in Blade views.

Example:

<x-layout>
  <x-card :title="$recipe->title">
    <p>{{ $recipe->description }}</p>
  </x-card>
</x-layout>

---

### 5. TailwindCSS Styling

- Use **Tailwind utility classes** for all styling.  
- Avoid inline CSS or external frameworks (Bootstrap, Bulma, etc.).  
- Store minimal overrides in resources/css/app.css.

Example:

<div class="p-4 bg-white rounded-xl shadow-md">
  <h1 class="text-2xl font-semibold text-gray-800">Welcome!</h1>
</div>

---

### 6. Frontend Assets

- Use **Vite** for asset bundling.  
- Every Blade layout must include:

@vite(['resources/css/app.css', 'resources/js/app.js'])

- Use **Alpine.js** for lightweight interactivity (avoid jQuery, React, or Vue).

---

### 7. Eloquent Models

- Use proper Eloquent relationships: hasMany, belongsTo, belongsToMany.  
- Always define $fillable, $casts, and $hidden.  
- Use eager loading (with()) for performance-critical queries.

---

### 8. Dependency Injection

- Always inject dependencies via constructor or method signature.  
- Never create new class instances manually inside controllers.

---

### 9. Validation

- Use **Form Request classes** for validation (no inline $request->validate()).  

Example:

php artisan make:request StoreRecipeRequest

---

### 10. Routing

- Define routes in routes/web.php or routes/api.php.  
- Use **named routes** for redirects (route('recipes.index')).  
- Group routes logically using Route::prefix() or Route::name() when needed.

Example:

Route::prefix('recipes')->name('recipes.')->group(function () {
    Route::get('/', [RecipeController::class, 'index'])->name('index');
});

---

### 11. Authentication & Authorization

- Use **Laravel Breeze** for authentication scaffolding.  
- Use **Spatie Laravel Permission** for roles and permissions.  
- Never implement custom session or password logic.

---

### 12. Error Handling / UX

- Use the @error directive for validation feedback.  
- Always render errors in Tailwind-styled elements.

Example:

@error('name')
  <p class="text-red-500 text-sm mt-1">{{ $message }}</p>
@enderror

---

### 13. Configuration & Environment

- Store all sensitive data in .env (DB, API keys, etc.).  
- Access them via the config() helper.  
- Never hardcode secrets or URLs in the code.

---

### 14. Testing

- Create feature or unit tests for every major functionality.  
- Use RefreshDatabase trait to ensure isolation.

Example:

php artisan make:test RecipeControllerTest

---

## Behavioral Rules for Cursor

1. Always assume this is a **Laravel full-stack project with Blade + TailwindCSS**.  
2. Never generate code for React, Vue, or Inertia.  
3. When creating pages:
   - Generate a Controller method (index, show, store, etc.)
   - Generate a matching Blade view in resources/views/
   - Apply Tailwind utility classes.
4. For forms:
   - Include @csrf and @method directives.
   - Use Tailwind form styles: border, rounded, focus:ring, etc.
5. Cursor must:
   - Respect Laravel folder conventions.
   - Keep logic out of Blade.
   - Never modify unrelated files or configurations.
